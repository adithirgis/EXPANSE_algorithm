besti <- i
} else {
n <- besti
}}
n
###################################################################################################################################
###if improvement just use the above to make a model with 8 covariates
###################################################################################################################################
modeln<-10
##############
models[[modeln]]<-list()
###
R2<-1
addedvar<-1
betaaddedvar<-1
minbetas<-1
j<-1
for (i in nfirstvar:nlastvar){
if (is.numeric(pred[,i])==TRUE){
modeltry<-lm(POLL~pred[,models[[1]]$indexbestmodel]+pred[,models[[2]]$indexbestmodel]+pred[,models[[3]]$indexbestmodel]+pred[,models[[4]]$indexbestmodel]+pred[,models[[5]]$indexbestmodel]+ pred[,models[[6]]$indexbestmodel]+ pred[,models[[7]]$indexbestmodel]+ pred[,models[[8]]$indexbestmodel]+ pred[,models[[9]]$indexbestmodel]+ pred[,i])
R2<-rbind(R2,summary(modeltry)$adj.r.squared)
#the new covariate is supposed to be in the last row, therefore I can select the row based on the model number +1
betaaddedvar<-rbind(betaaddedvar, modeltry$coefficients[(modeln+1)])##
####find out if there is a negative beta at pred. The intercept does not count [-1]!
minbetas<-rbind(minbetas, min(modeltry$coefficients[-c(1)]))
#pred[,i] is the row that's being tried out now. the name of that row can be found in  names(pred)[i]
addedvar<-rbind(addedvar,names(pred)[i])
j<-rbind(j, i)
models[[modeln]][[i]]<-summary(modeltry)
}
}
models[[modeln]]$results<-data.frame(addedvar=addedvar[-1],R2=R2[-1]*1, j=j[-1], betaaddedvar=betaaddedvar[-1]*1,minbetas=minbetas[-1]*1)
### this are the candidates models with the highest R2, not a negative beta for the new nor for any other covariate, except "v10","u10","t2m","tcc"
models[[modeln]]$resultspos<-subset(models[[modeln]]$results, minbetas>0 ) # | addedvar%in%c("v10","u10","t2m","tcc")
#rank the R2's of these models
models[[modeln]]$resultspos<-(data.frame(models[[modeln]]$resultspos, rank=rank(-models[[modeln]]$resultspos$R2, ties.method = "first")))
## this is the index of the row with the highest R2 and  no negative betas in this subset
models[[modeln]]$indexbestmodel<-subset(models[[modeln]]$resultspos, rank==1)$j
subset(models[[modeln]]$resultspos, rank==1)
###this is the model
models[[modeln]]$summarybestmodel<-models[[modeln]][[models[[modeln]]$indexbestmodel]]
###here are the names
models[[modeln]]$namesbestmodel<-c(names(pred)[models[[1]]$indexbestmodel], names(pred)[models[[2]]$indexbestmodel] , names(pred)[models[[3]]$indexbestmodel], names(pred)[models[[4]]$indexbestmodel], names(pred)[models[[5]]$indexbestmodel], names(pred)[models[[6]]$indexbestmodel], names(pred)[models[[7]]$indexbestmodel], names(pred)[models[[8]]$indexbestmodel], names(pred)[models[[9]]$indexbestmodel], names(pred)[models[[10]]$indexbestmodel])
####this is the r2 or that model
models[[modeln]]$R2bestmodel<-subset(models[[modeln]]$resultspos, rank==1)$R2
####this is the model object of the best model (can be used in Cook's D in car.infIndexPlot())
models[[modeln]]$bestmodel <- lm(POLL~pred[,models[[1]]$indexbestmodel]+pred[,models[[2]]$indexbestmodel]+pred[,models[[3]]$indexbestmodel]+ pred[,models[[4]]$indexbestmodel]+ pred[,models[[5]]$indexbestmodel]+ pred[,models[[6]]$indexbestmodel]+ pred[,models[[7]]$indexbestmodel]+ pred[,models[[8]]$indexbestmodel]+ pred[,models[[9]]$indexbestmodel]+ pred[,models[[10]]$indexbestmodel])
models[[10]]$summarybestmodel
models[[10]]$namesbestmodel
models[[9]]$R2bestmodel
models[[10]]$R2bestmodel
models[[10]]$summarybestmodel$coefficients[(modeln+1),4]<0.1 # stop for PM25_Zn
###################################################################################################################################
###if improvement just use the above to make a model with 8 covariates
###################################################################################################################################
modeln<-11
##############
models[[modeln]]<-list()
###
R2<-1
addedvar<-1
betaaddedvar<-1
minbetas<-1
j<-1
for (i in nfirstvar:nlastvar){
if (is.numeric(pred[,i])==TRUE){
modeltry<-lm(POLL~pred[,models[[1]]$indexbestmodel]+pred[,models[[2]]$indexbestmodel]+pred[,models[[3]]$indexbestmodel]+pred[,models[[4]]$indexbestmodel]+pred[,models[[5]]$indexbestmodel]+ pred[,models[[6]]$indexbestmodel]+ pred[,models[[7]]$indexbestmodel]+ pred[,models[[8]]$indexbestmodel]+ pred[,models[[9]]$indexbestmodel]+ pred[,models[[10]]$indexbestmodel]+ pred[,i])
R2<-rbind(R2,summary(modeltry)$adj.r.squared)
#the new covariate is supposed to be in the last row, therefore I can select the row based on the model number +1
betaaddedvar<-rbind(betaaddedvar, modeltry$coefficients[(modeln+1)])##
####find out if there is a negative beta at pred. The intercept does not count [-1]!
# at this point, coefficient [-11] exclude beta for wind variable
minbetas<-rbind(minbetas, min(modeltry$coefficients[-c(1)]))
#pred[,i] is the row that's being tried out now. the name of that row can be found in  names(pred)[i]
addedvar<-rbind(addedvar,names(pred)[i])
j<-rbind(j, i)
models[[modeln]][[i]]<-summary(modeltry)
}
}
models[[modeln]]$results<-data.frame(addedvar=addedvar[-1],R2=R2[-1]*1, j=j[-1], betaaddedvar=betaaddedvar[-1]*1,minbetas=minbetas[-1]*1)
### this are the candidates models with the highest R2, not a negative beta for the new nor for any other covariate, except "v10","u10","t2m","tcc"
models[[modeln]]$resultspos<-subset(models[[modeln]]$results, minbetas>0 ) # | addedvar%in%c("v10","u10","t2m","tcc")
#rank the R2's of these models
models[[modeln]]$resultspos<-(data.frame(models[[modeln]]$resultspos, rank=rank(-models[[modeln]]$resultspos$R2, ties.method = "first")))
## this is the index of the row with the highest R2 and  no negative betas in this subset
models[[modeln]]$indexbestmodel<-subset(models[[modeln]]$resultspos, rank==1)$j
subset(models[[modeln]]$resultspos, rank==1)
###this is the model
models[[modeln]]$summarybestmodel<-models[[modeln]][[models[[modeln]]$indexbestmodel]]
###here are the names
models[[modeln]]$namesbestmodel<-c(names(pred)[models[[1]]$indexbestmodel], names(pred)[models[[2]]$indexbestmodel] , names(pred)[models[[3]]$indexbestmodel], names(pred)[models[[4]]$indexbestmodel], names(pred)[models[[5]]$indexbestmodel], names(pred)[models[[6]]$indexbestmodel], names(pred)[models[[7]]$indexbestmodel], names(pred)[models[[8]]$indexbestmodel], names(pred)[models[[9]]$indexbestmodel],names(pred)[models[[10]]$indexbestmodel], names(pred)[models[[11]]$indexbestmodel])
####this is the r2 or that model
models[[modeln]]$R2bestmodel<-subset(models[[modeln]]$resultspos, rank==1)$R2
####this is the model object of the best model (can be used in Cook's D in car.infIndexPlot())
models[[modeln]]$bestmodel <- lm(POLL~pred[,models[[1]]$indexbestmodel]+pred[,models[[2]]$indexbestmodel]+pred[,models[[3]]$indexbestmodel]+ pred[,models[[4]]$indexbestmodel]+ pred[,models[[5]]$indexbestmodel]+ pred[,models[[6]]$indexbestmodel]+ pred[,models[[7]]$indexbestmodel]+ pred[,models[[8]]$indexbestmodel]+ pred[,models[[9]]$indexbestmodel]+ pred[,models[[10]]$indexbestmodel]+ pred[,models[[11]]$indexbestmodel])
models[[11]]$summarybestmodel
models[[11]]$namesbestmodel
models[[10]]$R2bestmodel
models[[11]]$R2bestmodel
models[[11]]$summarybestmodel$coefficients[(modeln+1),4]<0.1 # False - STOP HERE for PM25_CU, PM25_NI
###################################################################################################################################
###if improvement just use the above to make a model with 8 covariates
###################################################################################################################################
modeln<-12
##############
models[[modeln]]<-list()
###
R2<-1
addedvar<-1
betaaddedvar<-1
minbetas<-1
j<-1
for (i in nfirstvar:nlastvar){
if (is.numeric(pred[,i])==TRUE){
modeltry<-lm(POLL~pred[,models[[1]]$indexbestmodel]+pred[,models[[2]]$indexbestmodel]+pred[,models[[3]]$indexbestmodel]+pred[,models[[4]]$indexbestmodel]+pred[,models[[5]]$indexbestmodel]+ pred[,models[[6]]$indexbestmodel]+ pred[,models[[7]]$indexbestmodel]+ pred[,models[[8]]$indexbestmodel]+ pred[,models[[9]]$indexbestmodel]+ pred[,models[[10]]$indexbestmodel]+ pred[,models[[11]]$indexbestmodel]+pred[,i])
R2<-rbind(R2,summary(modeltry)$adj.r.squared)
#the new covariate is supposed to be in the last row, therefore I can select the row based on the model number +1
betaaddedvar<-rbind(betaaddedvar, modeltry$coefficients[(modeln+1)])##
####find out if there is a negative beta at pred. The intercept does not count [-1]!
minbetas<-rbind(minbetas, min(modeltry$coefficients[-c(1)]))
#pred[,i] is the row that's being tried out now. the name of that row can be found in  names(pred)[i]
addedvar<-rbind(addedvar,names(pred)[i])
j<-rbind(j, i)
models[[modeln]][[i]]<-summary(modeltry)
}
}
models[[modeln]]$results<-data.frame(addedvar=addedvar[-1],R2=R2[-1]*1, j=j[-1], betaaddedvar=betaaddedvar[-1]*1,minbetas=minbetas[-1]*1)
### this are the candidates models with the highest R2, not a negative beta for the new nor for any other covariate, except "v10","u10","t2m","tcc"
models[[modeln]]$resultspos<-subset(models[[modeln]]$results, minbetas>0 ) # | addedvar%in%c("v10","u10","t2m","tcc")
#rank the R2's of these models
models[[modeln]]$resultspos<-(data.frame(models[[modeln]]$resultspos, rank=rank(-models[[modeln]]$resultspos$R2, ties.method = "first")))
## this is the index of the row with the highest R2 and  no negative betas in this subset
models[[modeln]]$indexbestmodel<-subset(models[[modeln]]$resultspos, rank==1)$j
subset(models[[modeln]]$resultspos, rank==1)
###this is the model
models[[modeln]]$summarybestmodel<-models[[modeln]][[models[[modeln]]$indexbestmodel]]
###here are the names
models[[modeln]]$namesbestmodel<-c(names(pred)[models[[1]]$indexbestmodel], names(pred)[models[[2]]$indexbestmodel] , names(pred)[models[[3]]$indexbestmodel], names(pred)[models[[4]]$indexbestmodel], names(pred)[models[[5]]$indexbestmodel], names(pred)[models[[6]]$indexbestmodel], names(pred)[models[[7]]$indexbestmodel], names(pred)[models[[8]]$indexbestmodel], names(pred)[models[[9]]$indexbestmodel],names(pred)[models[[10]]$indexbestmodel], names(pred)[models[[11]]$indexbestmodel], names(pred)[models[[12]]$indexbestmodel])
####this is the r2 or that model
models[[modeln]]$R2bestmodel<-subset(models[[modeln]]$resultspos, rank==1)$R2
####this is the model object of the best model (can be used in Cook's D in car.infIndexPlot())
models[[modeln]]$bestmodel <- lm(POLL~pred[,models[[1]]$indexbestmodel]+pred[,models[[2]]$indexbestmodel]+pred[,models[[3]]$indexbestmodel]+ pred[,models[[4]]$indexbestmodel]+ pred[,models[[5]]$indexbestmodel]+ pred[,models[[6]]$indexbestmodel]+ pred[,models[[7]]$indexbestmodel]+ pred[,models[[8]]$indexbestmodel]+ pred[,models[[9]]$indexbestmodel]+ pred[,models[[10]]$indexbestmodel]+ pred[,models[[11]]$indexbestmodel]+ pred[,models[[12]]$indexbestmodel])
models[[12]]$summarybestmodel
models[[12]]$namesbestmodel
models[[11]]$R2bestmodel
models[[12]]$R2bestmodel
models[[12]]$summarybestmodel$coefficients[(modeln+1),4]<0.1 # False - STOP HERE for PM25_FE
###################################################################################################################################
###if improvement just use the above to make a model with 8 covariates
###################################################################################################################################
modeln<-13
##############
models[[modeln]]<-list()
###
R2<-1
addedvar<-1
betaaddedvar<-1
minbetas<-1
j<-1
for (i in nfirstvar:nlastvar){
if (is.numeric(pred[,i])==TRUE){
modeltry<-lm(POLL~pred[,models[[1]]$indexbestmodel]+pred[,models[[2]]$indexbestmodel]+pred[,models[[3]]$indexbestmodel]+pred[,models[[4]]$indexbestmodel]+pred[,models[[5]]$indexbestmodel]+ pred[,models[[6]]$indexbestmodel]+ pred[,models[[7]]$indexbestmodel]+ pred[,models[[8]]$indexbestmodel]+ pred[,models[[9]]$indexbestmodel]+ pred[,models[[10]]$indexbestmodel]+ pred[,models[[11]]$indexbestmodel]+ pred[,models[[12]]$indexbestmodel]+pred[,i])
R2<-rbind(R2,summary(modeltry)$adj.r.squared)
#the new covariate is supposed to be in the last row, therefore I can select the row based on the model number +1
betaaddedvar<-rbind(betaaddedvar, modeltry$coefficients[(modeln+1)])##
####find out if there is a negative beta at pred. The intercept does not count [-1]!
minbetas<-rbind(minbetas, min(modeltry$coefficients[-c(1)]))
#pred[,i] is the row that's being tried out now. the name of that row can be found in  names(pred)[i]
addedvar<-rbind(addedvar,names(pred)[i])
j<-rbind(j, i)
models[[modeln]][[i]]<-summary(modeltry)
}
}
models[[modeln]]$results<-data.frame(addedvar=addedvar[-1],R2=R2[-1]*1, j=j[-1], betaaddedvar=betaaddedvar[-1]*1,minbetas=minbetas[-1]*1)
### this are the candidates models with the highest R2, not a negative beta for the new nor for any other covariate
models[[modeln]]$resultspos<-subset(models[[modeln]]$results, minbetas>0) # | addedvar%in%c("v10","u10","t2m","tcc")
#rank the R2's of these models
models[[modeln]]$resultspos<-(data.frame(models[[modeln]]$resultspos, rank=rank(-models[[modeln]]$resultspos$R2, ties.method = "first")))
## this is the index of the row with the highest R2 and  no negative betas in this subset
models[[modeln]]$indexbestmodel<-subset(models[[modeln]]$resultspos, rank==1)$j
subset(models[[modeln]]$resultspos, rank==1)
###this is the model
models[[modeln]]$summarybestmodel<-models[[modeln]][[models[[modeln]]$indexbestmodel]]
###here are the names
models[[modeln]]$namesbestmodel<-c(names(pred)[models[[1]]$indexbestmodel], names(pred)[models[[2]]$indexbestmodel] , names(pred)[models[[3]]$indexbestmodel], names(pred)[models[[4]]$indexbestmodel], names(pred)[models[[5]]$indexbestmodel], names(pred)[models[[6]]$indexbestmodel], names(pred)[models[[7]]$indexbestmodel], names(pred)[models[[8]]$indexbestmodel], names(pred)[models[[9]]$indexbestmodel],names(pred)[models[[10]]$indexbestmodel], names(pred)[models[[11]]$indexbestmodel], names(pred)[models[[12]]$indexbestmodel], names(pred)[models[[13]]$indexbestmodel])
####this is the r2 or that model
models[[modeln]]$R2bestmodel<-subset(models[[modeln]]$resultspos, rank==1)$R2
####this is the model object of the best model (can be used in Cook's D in car.infIndexPlot())
models[[modeln]]$bestmodel <- lm(POLL~pred[,models[[1]]$indexbestmodel]+pred[,models[[2]]$indexbestmodel]+pred[,models[[3]]$indexbestmodel]+ pred[,models[[4]]$indexbestmodel]+ pred[,models[[5]]$indexbestmodel]+ pred[,models[[6]]$indexbestmodel]+ pred[,models[[7]]$indexbestmodel]+ pred[,models[[8]]$indexbestmodel]+ pred[,models[[9]]$indexbestmodel]+ pred[,models[[10]]$indexbestmodel]+ pred[,models[[11]]$indexbestmodel]+ pred[,models[[12]]$indexbestmodel]+ pred[,models[[13]]$indexbestmodel])
models[[13]]$summarybestmodel
models[[13]]$namesbestmodel
models[[12]]$R2bestmodel
models[[13]]$R2bestmodel
models[[13]]$summarybestmodel$coefficients[(modeln+1),4]<0.1 # False - STOP HERE for PM25_S
###################################################################################################################################
###if improvement just use the above to make a model with 8 covariates
###################################################################################################################################
modeln<-14
##############
models[[modeln]]<-list()
###
R2<-1
addedvar<-1
betaaddedvar<-1
minbetas<-1
j<-1
for (i in nfirstvar:nlastvar){
if (is.numeric(pred[,i])==TRUE){
modeltry<-lm(POLL~pred[,models[[1]]$indexbestmodel]+pred[,models[[2]]$indexbestmodel]+pred[,models[[3]]$indexbestmodel]+pred[,models[[4]]$indexbestmodel]+pred[,models[[5]]$indexbestmodel]+ pred[,models[[6]]$indexbestmodel]+ pred[,models[[7]]$indexbestmodel]+ pred[,models[[8]]$indexbestmodel]+ pred[,models[[9]]$indexbestmodel]+ pred[,models[[10]]$indexbestmodel]+ pred[,models[[11]]$indexbestmodel]+ pred[,models[[12]]$indexbestmodel]+ pred[,models[[13]]$indexbestmodel]+pred[,i])
R2<-rbind(R2,summary(modeltry)$adj.r.squared)
#the new covariate is supposed to be in the last row, therefore I can select the row based on the model number +1
betaaddedvar<-rbind(betaaddedvar, modeltry$coefficients[(modeln+1)])##
####find out if there is a negative beta at pred. The intercept does not count [-1]!
minbetas<-rbind(minbetas, min(modeltry$coefficients[-c(1)]))
#pred[,i] is the row that's being tried out now. the name of that row can be found in  names(pred)[i]
addedvar<-rbind(addedvar,names(pred)[i])
j<-rbind(j, i)
models[[modeln]][[i]]<-summary(modeltry)
}
}
models[[modeln]]$results<-data.frame(addedvar=addedvar[-1],R2=R2[-1]*1, j=j[-1], betaaddedvar=betaaddedvar[-1]*1,minbetas=minbetas[-1]*1)
### this are the candidates models with the highest R2, not a negative beta for the new nor for any other covariate
models[[modeln]]$resultspos<-subset(models[[modeln]]$results, minbetas>0) # | addedvar%in%c("v10","u10","t2m","tcc")
#rank the R2's of these models
models[[modeln]]$resultspos<-(data.frame(models[[modeln]]$resultspos, rank=rank(-models[[modeln]]$resultspos$R2, ties.method = "first")))
## this is the index of the row with the highest R2 and  no negative betas in this subset
models[[modeln]]$indexbestmodel<-subset(models[[modeln]]$resultspos, rank==1)$j
subset(models[[modeln]]$resultspos, rank==1)
###this is the model
models[[modeln]]$summarybestmodel<-models[[modeln]][[models[[modeln]]$indexbestmodel]]
###here are the names
models[[modeln]]$namesbestmodel<-c(names(pred)[models[[1]]$indexbestmodel], names(pred)[models[[2]]$indexbestmodel] , names(pred)[models[[3]]$indexbestmodel], names(pred)[models[[4]]$indexbestmodel], names(pred)[models[[5]]$indexbestmodel], names(pred)[models[[6]]$indexbestmodel], names(pred)[models[[7]]$indexbestmodel], names(pred)[models[[8]]$indexbestmodel], names(pred)[models[[9]]$indexbestmodel],names(pred)[models[[10]]$indexbestmodel], names(pred)[models[[11]]$indexbestmodel], names(pred)[models[[12]]$indexbestmodel], names(pred)[models[[13]]$indexbestmodel], names(pred)[models[[14]]$indexbestmodel])
####this is the r2 or that model
models[[modeln]]$R2bestmodel<-subset(models[[modeln]]$resultspos, rank==1)$R2
####this is the model object of the best model (can be used in Cook's D in car.infIndexPlot())
models[[modeln]]$bestmodel <- lm(POLL~pred[,models[[1]]$indexbestmodel]+pred[,models[[2]]$indexbestmodel]+pred[,models[[3]]$indexbestmodel]+ pred[,models[[4]]$indexbestmodel]+ pred[,models[[5]]$indexbestmodel]+ pred[,models[[6]]$indexbestmodel]+ pred[,models[[7]]$indexbestmodel]+ pred[,models[[8]]$indexbestmodel]+ pred[,models[[9]]$indexbestmodel]+ pred[,models[[10]]$indexbestmodel]+ pred[,models[[11]]$indexbestmodel]+ pred[,models[[12]]$indexbestmodel]+ pred[,models[[13]]$indexbestmodel]+ pred[,models[[14]]$indexbestmodel])
models[[14]]$summarybestmodel
models[[14]]$namesbestmodel
models[[13]]$R2bestmodel
models[[14]]$R2bestmodel
models[[14]]$summarybestmodel$coefficients[(modeln+1),4]<0.1 # False - STOP HERE for PM25_Ni, PM25_ZN
###################################################################################################################################
###if improvement just use the above to make a model with 8 covariates
###################################################################################################################################
modeln<-15
##############
models[[modeln]]<-list()
###
R2<-1
addedvar<-1
betaaddedvar<-1
minbetas<-1
j<-1
for (i in nfirstvar:nlastvar){
if (is.numeric(pred[,i])==TRUE){
modeltry<-lm(POLL~pred[,models[[1]]$indexbestmodel]+pred[,models[[2]]$indexbestmodel]+pred[,models[[3]]$indexbestmodel]+pred[,models[[4]]$indexbestmodel]+pred[,models[[5]]$indexbestmodel]+ pred[,models[[6]]$indexbestmodel]+ pred[,models[[7]]$indexbestmodel]+ pred[,models[[8]]$indexbestmodel]+ pred[,models[[9]]$indexbestmodel]+ pred[,models[[10]]$indexbestmodel]+ pred[,models[[11]]$indexbestmodel]+ pred[,models[[12]]$indexbestmodel]+ pred[,models[[13]]$indexbestmodel]+ pred[,models[[14]]$indexbestmodel]+pred[,i])
R2<-rbind(R2,summary(modeltry)$adj.r.squared)
#the new covariate is supposed to be in the last row, therefore I can select the row based on the model number +1
betaaddedvar<-rbind(betaaddedvar, modeltry$coefficients[(modeln+1)])##
####find out if there is a negative beta at pred. The intercept does not count [-1]!
minbetas<-rbind(minbetas, min(modeltry$coefficients[-c(1)]))
#pred[,i] is the row that's being tried out now. the name of that row can be found in  names(pred)[i]
addedvar<-rbind(addedvar,names(pred)[i])
j<-rbind(j, i)
models[[modeln]][[i]]<-summary(modeltry)
}
}
models[[modeln]]$results<-data.frame(addedvar=addedvar[-1],R2=R2[-1]*1, j=j[-1], betaaddedvar=betaaddedvar[-1]*1,minbetas=minbetas[-1]*1)
### this are the candidates models with the highest R2, not a negative beta for the new nor for any other covariate
models[[modeln]]$resultspos<-subset(models[[modeln]]$results, minbetas>0) # | addedvar%in%c("v10","u10","t2m","tcc")
#rank the R2's of these models
models[[modeln]]$resultspos<-(data.frame(models[[modeln]]$resultspos, rank=rank(-models[[modeln]]$resultspos$R2, ties.method = "first")))
## this is the index of the row with the highest R2 and  no negative betas in this subset
models[[modeln]]$indexbestmodel<-subset(models[[modeln]]$resultspos, rank==1)$j
subset(models[[modeln]]$resultspos, rank==1)
###this is the model
models[[modeln]]$summarybestmodel<-models[[modeln]][[models[[modeln]]$indexbestmodel]]
###here are the names
models[[modeln]]$namesbestmodel<-c(names(pred)[models[[1]]$indexbestmodel], names(pred)[models[[2]]$indexbestmodel] , names(pred)[models[[3]]$indexbestmodel], names(pred)[models[[4]]$indexbestmodel], names(pred)[models[[5]]$indexbestmodel], names(pred)[models[[6]]$indexbestmodel], names(pred)[models[[7]]$indexbestmodel], names(pred)[models[[8]]$indexbestmodel], names(pred)[models[[9]]$indexbestmodel],names(pred)[models[[10]]$indexbestmodel], names(pred)[models[[11]]$indexbestmodel], names(pred)[models[[12]]$indexbestmodel], names(pred)[models[[13]]$indexbestmodel], names(pred)[models[[14]]$indexbestmodel], names(pred)[models[[15]]$indexbestmodel])
####this is the r2 or that model
models[[modeln]]$R2bestmodel<-subset(models[[modeln]]$resultspos, rank==1)$R2
####this is the model object of the best model (can be used in Cook's D in car.infIndexPlot())
models[[modeln]]$bestmodel <- lm(POLL~pred[,models[[1]]$indexbestmodel]+pred[,models[[2]]$indexbestmodel]+pred[,models[[3]]$indexbestmodel]+ pred[,models[[4]]$indexbestmodel]+ pred[,models[[5]]$indexbestmodel]+ pred[,models[[6]]$indexbestmodel]+ pred[,models[[7]]$indexbestmodel]+ pred[,models[[8]]$indexbestmodel]+ pred[,models[[9]]$indexbestmodel]+ pred[,models[[10]]$indexbestmodel]+ pred[,models[[11]]$indexbestmodel]+ pred[,models[[12]]$indexbestmodel]+ pred[,models[[13]]$indexbestmodel]+ pred[,models[[14]]$indexbestmodel]+ pred[,models[[15]]$indexbestmodel])
models[[15]]$summarybestmodel
models[[15]]$namesbestmodel
models[[14]]$R2bestmodel
models[[15]]$R2bestmodel
models[[15]]$summarybestmodel$coefficients[(modeln+1),4]<0.1 # False - STOP HERE for PM25_S
# at this point I always check wether the adjusted R2 of the next model is better than the one before, and if not I end here
# last step is to exclude all var with p>0.1 one by one with the lowes p first, until all <0.1.
###################################################################################################################################
###if improvement just use the above to make a model with 8 covariates
###################################################################################################################################
modeln<-16
##############
models[[modeln]]<-list()
###
R2<-1
addedvar<-1
betaaddedvar<-1
minbetas<-1
j<-1
for (i in nfirstvar:nlastvar){
if (is.numeric(pred[,i])==TRUE){
modeltry<-lm(POLL~pred[,models[[1]]$indexbestmodel]+pred[,models[[2]]$indexbestmodel]+pred[,models[[3]]$indexbestmodel]+pred[,models[[4]]$indexbestmodel]+pred[,models[[5]]$indexbestmodel]+ pred[,models[[6]]$indexbestmodel]+ pred[,models[[7]]$indexbestmodel]+ pred[,models[[8]]$indexbestmodel]+ pred[,models[[9]]$indexbestmodel]+ pred[,models[[10]]$indexbestmodel]+
pred[,models[[11]]$indexbestmodel]+ pred[,models[[12]]$indexbestmodel]+ pred[,models[[13]]$indexbestmodel]+ pred[,models[[14]]$indexbestmodel]+ pred[,models[[15]]$indexbestmodel]+pred[,i])
R2<-rbind(R2,summary(modeltry)$adj.r.squared)
#the new covariate is supposed to be in the last row, therefore I can select the row based on the model number +1
betaaddedvar<-rbind(betaaddedvar, modeltry$coefficients[(modeln+1)])##
####find out if there is a negative beta at pred. The intercept does not count [-1]!
minbetas<-rbind(minbetas, min(modeltry$coefficients[-c(1)]))
#pred[,i] is the row that's being tried out now. the name of that row can be found in  names(pred)[i]
addedvar<-rbind(addedvar,names(pred)[i])
j<-rbind(j, i)
models[[modeln]][[i]]<-summary(modeltry)
}
}
models[[modeln]]$results<-data.frame(addedvar=addedvar[-1],R2=R2[-1]*1, j=j[-1], betaaddedvar=betaaddedvar[-1]*1,minbetas=minbetas[-1]*1)
### this are the candidates models with the highest R2, not a negative beta for the new nor for any other covariate
models[[modeln]]$resultspos<-subset(models[[modeln]]$results, minbetas>0) # | addedvar%in%c("v10","u10","t2m","tcc")
#rank the R2's of these models
models[[modeln]]$resultspos<-(data.frame(models[[modeln]]$resultspos, rank=rank(-models[[modeln]]$resultspos$R2, ties.method = "first")))
## this is the index of the row with the highest R2 and  no negative betas in this subset
models[[modeln]]$indexbestmodel<-subset(models[[modeln]]$resultspos, rank==1)$j
subset(models[[modeln]]$resultspos, rank==1)
###this is the model
models[[modeln]]$summarybestmodel<-models[[modeln]][[models[[modeln]]$indexbestmodel]]
###here are the names
models[[modeln]]$namesbestmodel<-c(names(pred)[models[[1]]$indexbestmodel], names(pred)[models[[2]]$indexbestmodel] , names(pred)[models[[3]]$indexbestmodel], names(pred)[models[[4]]$indexbestmodel], names(pred)[models[[5]]$indexbestmodel], names(pred)[models[[6]]$indexbestmodel], names(pred)[models[[7]]$indexbestmodel], names(pred)[models[[8]]$indexbestmodel], names(pred)[models[[9]]$indexbestmodel],names(pred)[models[[10]]$indexbestmodel],
names(pred)[models[[11]]$indexbestmodel], names(pred)[models[[12]]$indexbestmodel], names(pred)[models[[13]]$indexbestmodel], names(pred)[models[[14]]$indexbestmodel], names(pred)[models[[15]]$indexbestmodel], names(pred)[models[[16]]$indexbestmodel])
####this is the r2 or that model
models[[modeln]]$R2bestmodel<-subset(models[[modeln]]$resultspos, rank==1)$R2
####this is the model object of the best model (can be used in Cook's D in car.infIndexPlot())
models[[modeln]]$bestmodel <- lm(POLL~pred[,models[[1]]$indexbestmodel]+pred[,models[[2]]$indexbestmodel]+pred[,models[[3]]$indexbestmodel]+ pred[,models[[4]]$indexbestmodel]+ pred[,models[[5]]$indexbestmodel]+ pred[,models[[6]]$indexbestmodel]+ pred[,models[[7]]$indexbestmodel]+ pred[,models[[8]]$indexbestmodel]+ pred[,models[[9]]$indexbestmodel]+ pred[,models[[10]]$indexbestmodel]+
pred[,models[[11]]$indexbestmodel]+ pred[,models[[12]]$indexbestmodel]+ pred[,models[[13]]$indexbestmodel]+ pred[,models[[14]]$indexbestmodel]+ pred[,models[[15]]$indexbestmodel]+ pred[,models[[16]]$indexbestmodel])
models[[16]]$summarybestmodel
models[[16]]$namesbestmodel
models[[15]]$R2bestmodel
models[[16]]$R2bestmodel
models[[16]]$summarybestmodel$coefficients[(modeln+1),4]<0.1 # False - STOP HERE for PM25_Cu
# at this point I always check wether the adjusted R2 of the next model is better than the one before, and if not I end here
# last step is to exclude all var with p>0.1 one by one with the lowes p first, until all <0.1.
###################################################################################################################################
###if improvement just use the above to make a model with 8 covariates
###################################################################################################################################
modeln<-17
##############
models[[modeln]]<-list()
###
R2<-1
addedvar<-1
betaaddedvar<-1
minbetas<-1
j<-1
for (i in nfirstvar:nlastvar){
if (is.numeric(pred[,i])==TRUE){
modeltry<-lm(POLL~pred[,models[[1]]$indexbestmodel]+pred[,models[[2]]$indexbestmodel]+pred[,models[[3]]$indexbestmodel]+pred[,models[[4]]$indexbestmodel]+pred[,models[[5]]$indexbestmodel]+ pred[,models[[6]]$indexbestmodel]+ pred[,models[[7]]$indexbestmodel]+ pred[,models[[8]]$indexbestmodel]+ pred[,models[[9]]$indexbestmodel]+ pred[,models[[10]]$indexbestmodel]+
pred[,models[[11]]$indexbestmodel]+ pred[,models[[12]]$indexbestmodel]+ pred[,models[[13]]$indexbestmodel]+ pred[,models[[14]]$indexbestmodel]+ pred[,models[[15]]$indexbestmodel]+ pred[,models[[16]]$indexbestmodel]+pred[,i])
R2<-rbind(R2,summary(modeltry)$adj.r.squared)
#the new covariate is supposed to be in the last row, therefore I can select the row based on the model number +1
betaaddedvar<-rbind(betaaddedvar, modeltry$coefficients[(modeln+1)])##
####find out if there is a negative beta at pred. The intercept does not count [-1]!
minbetas<-rbind(minbetas, min(modeltry$coefficients[-c(1)]))
#pred[,i] is the row that's being tried out now. the name of that row can be found in  names(pred)[i]
addedvar<-rbind(addedvar,names(pred)[i])
j<-rbind(j, i)
models[[modeln]][[i]]<-summary(modeltry)
}
}
models[[modeln]]$results<-data.frame(addedvar=addedvar[-1],R2=R2[-1]*1, j=j[-1], betaaddedvar=betaaddedvar[-1]*1,minbetas=minbetas[-1]*1)
### this are the candidates models with the highest R2, not a negative beta for the new nor for any other covariate
models[[modeln]]$resultspos<-subset(models[[modeln]]$results, minbetas>0) # | addedvar%in%c("v10","u10","t2m","tcc")
#rank the R2's of these models
models[[modeln]]$resultspos<-(data.frame(models[[modeln]]$resultspos, rank=rank(-models[[modeln]]$resultspos$R2, ties.method = "first")))
## this is the index of the row with the highest R2 and  no negative betas in this subset
models[[modeln]]$indexbestmodel<-subset(models[[modeln]]$resultspos, rank==1)$j
subset(models[[modeln]]$resultspos, rank==1)
###this is the model
models[[modeln]]$summarybestmodel<-models[[modeln]][[models[[modeln]]$indexbestmodel]]
###here are the names
models[[modeln]]$namesbestmodel<-c(names(pred)[models[[1]]$indexbestmodel], names(pred)[models[[2]]$indexbestmodel] , names(pred)[models[[3]]$indexbestmodel], names(pred)[models[[4]]$indexbestmodel], names(pred)[models[[5]]$indexbestmodel], names(pred)[models[[6]]$indexbestmodel], names(pred)[models[[7]]$indexbestmodel], names(pred)[models[[8]]$indexbestmodel], names(pred)[models[[9]]$indexbestmodel],names(pred)[models[[10]]$indexbestmodel],
names(pred)[models[[11]]$indexbestmodel], names(pred)[models[[12]]$indexbestmodel], names(pred)[models[[13]]$indexbestmodel], names(pred)[models[[14]]$indexbestmodel], names(pred)[models[[15]]$indexbestmodel], names(pred)[models[[16]]$indexbestmodel], names(pred)[models[[17]]$indexbestmodel])
####this is the r2 or that model
models[[modeln]]$R2bestmodel<-subset(models[[modeln]]$resultspos, rank==1)$R2
####this is the model object of the best model (can be used in Cook's D in car.infIndexPlot())
models[[modeln]]$bestmodel <- lm(POLL~pred[,models[[1]]$indexbestmodel]+pred[,models[[2]]$indexbestmodel]+pred[,models[[3]]$indexbestmodel]+ pred[,models[[4]]$indexbestmodel]+ pred[,models[[5]]$indexbestmodel]+ pred[,models[[6]]$indexbestmodel]+ pred[,models[[7]]$indexbestmodel]+ pred[,models[[8]]$indexbestmodel]+ pred[,models[[9]]$indexbestmodel]+ pred[,models[[10]]$indexbestmodel]+
pred[,models[[11]]$indexbestmodel]+ pred[,models[[12]]$indexbestmodel]+ pred[,models[[13]]$indexbestmodel]+ pred[,models[[14]]$indexbestmodel]+ pred[,models[[15]]$indexbestmodel]+ pred[,models[[16]]$indexbestmodel]+ pred[,models[[17]]$indexbestmodel])
models[[17]]$summarybestmodel
models[[17]]$namesbestmodel
models[[16]]$R2bestmodel
models[[17]]$R2bestmodel
models[[17]]$summarybestmodel$coefficients[(modeln+1),4]<0.1 # FALSE, stop for PM25_FE
temp <- 0
besti <- 0
for (i in 1:20){
print(paste("model", i, "R2", models[[i]]$R2bestmodel))
if(((models[[i]]$R2bestmodel-temp)/temp > 0.01)==T){   #R2 improvement > 1%
temp <- models[[i]]$R2bestmodel
besti <- i
} else {
n <- besti
}}
n
#########################
# the adjusted R2 of the 15th model is not better than the 14th.
##########################---------------------
Final <- cbind(POLL)
colnames(Final) <- c("Final")
for (j in 1:(n)){
for (i in nfirstvar:nlastvar){
if(names(pred)[i]==models[[n]]$namesbestmodel[j])
Final <- cbind(Final, pred[i])
}}
lastmodel <- lm(Final~., data=Final)
# exclude variables whose p values are >0.1 from the model, one by one with the highest p
for(j in (dim(Final)[2]-1):1){
if(max(summary(lastmodel)$coefficients[-1,4])>=0.1){
a <- max(summary(lastmodel)$coefficients[-1,4])
for (i in 1:j){
if(summary(lastmodel)$coefficients[i+1,4]==a){
Final <- Final[c(-(i+1))]}
}
}
lastmodel <- lm(Final~., data=Final)
}
for(j in (dim(Final)[2]-1):1){
if(max(vif(lastmodel))>=3){
b <- max(vif(lastmodel))
}
for (i in 1:j){
if(vif(lastmodel)[i]==b){
Final <- Final[c(-(i+1))]}}
lastmodel <- lm(Final~., data=Final)
}
finalBestModel <- lastmodel
###here are the names
finalBestModelNames <-names(Final[-1])
####this is the r2 of that model
finalBestModelR2 <-summary(finalBestModel)$adj.r.squared
summary(finalBestModel)
increR2 <- c()
FinalR2 <- Final
for (i in (dim(Final)[2]-1):1){
model <- lm(Final~., data=FinalR2)
increR2 <- cbind(increR2, summary(model)$adj.r.squared)
FinalR2 <- FinalR2[c(-(i+1))]
}
summarymodel <- names(Final)
for(i in 1:4){
summarymodel <- cbind(summarymodel, summary(finalBestModel)$coefficients[,i])
}
vif <- c("NA", vif(finalBestModel))
incresR2 <- c()
for(i in length(finalBestModelNames):1){
incresR2 <- cbind(incresR2, increR2[i])
}
incresR2 <- c("NA", incresR2)
summarymodel <- cbind(summarymodel,vif,incresR2)
colnames(summarymodel) <- c("variables", "beta", "Std.Error", "t", "P", "VIF", "increR2")
write.table (summarymodel, file= "data/SLR_summary_model.csv" ,sep="\t",dec = "," ,row.names=F)
summarymodel
# basic GWR analysis
slr <- read.csv("data/SLR_summary_model.csv")
slr
# basic GWR analysis
slr <- read.csv("data/SLR_summary_model.csv", sep='t')
slr
# basic GWR analysis
slr <- read.csv("data/SLR_summary_model.csv", sep='t',dec = "," ,row.names=F)
# basic GWR analysis
slr <- read.csv("data/SLR_summary_model.csv", sep='t',dec = "," )
slr
# basic GWR analysis
slr <- read.csv("data/SLR_summary_model.csv", sep='\t',dec = "," )
slr
slr$variables
slr$variables[-1]
paste(slr$variables[-1], collapse = "+")
eq <- as.formula(paste0('NO2_2010~',  paste(slr$variables[-1], collapse = "+")))
eq
summary(lm(eq, data=train_data))
gwr.res <- gwr.basic(eq,
data=sp_train,
regression.points=grd2, bw=50000000,
dMat=DM,kernel='exponential')
# bw can be chosen ‘automatically’ by cross-validation.
# kernel: the functional form of the kernel (the weighting applied in the window) - here it is Gaussian
names(gwr.res)
names(gwr.res$SDF)
#(the Spatial* object with the GWR results is in gwr.res$SDF - here the object is a SpatialPixelsDataFrame)
image(gwr.res$SDF,'no2_10MACC')
# image(gwr.res$SDF,'Intercept')
contour(gwr.res$SDF,'no2_10MACC',lwd=1,add=TRUE)
# plot(londonborough,add=TRUE)
plot(sp_train,add=TRUE,pch=16,col='blueviolet', alpha=0.05)
image(gwr.res$SDF,'Intercept')
contour(gwr.res$SDF,'Intercept',lwd=1,add=TRUE)
# plot(londonborough,add=TRUE)
plot(sp_train,add=TRUE,pch=16,col='blueviolet', alpha=0.05)
head(gwr.res$SDF['Intercept'])
class(gwr.res$SDF['Intercept'])
# bw can be chosen ‘automatically’ by cross-validation.
# kernel: the functional form of the kernel (the weighting applied in the window) - here it is Gaussian
names(gwr.res)
names(gwr.res$SDF)
summary(gwr.res)
gwr.res$lm
summary(lm(eq, data=train_data))
names(gwr.res$SDF)
# bw can be chosen ‘automatically’ by cross-validation.
# kernel: the functional form of the kernel (the weighting applied in the window) - here it is Gaussian
names(gwr.res)
